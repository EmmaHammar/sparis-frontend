{"ast":null,"code":"var _jsxFileName = \"/Users/emmahammar/Desktop/repos/repos-jsfordjupn/repos-react/sparis/src/pages/Adults.js\";\nimport React from 'react';\nimport NavFooterAdults from '../containers/Adults/NavFooterAdults';\nimport SettingsAdults from '../containers/Adults/SettingsAdults';\nimport TotalSavingsAdults from '../containers/Adults/TotalSavingsAdults';\nimport SavingGoalAdults from '../containers/Adults/SavingGoalAdults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Adults(_ref) {\n  let {\n    dbAccount,\n    dbParent,\n    dbChildren\n  } = _ref;\n  //NOTE mockedIds: \n  let loginAccountId = 1;\n  let findChildIdArr = [];\n  console.log(\"dbChildren\", dbChildren.children);\n  let childrenArr = dbChildren.children;\n  childrenArr.map((child, index) => child.accountId === loginAccountId ? findChildIdArr.push(child.childId) : \"\");\n  console.log(\"findChildIdArr after push:\", findChildIdArr); //Vad är det vi får här? Har vi i App.js redan sållat så vi endast får rätt barn? O om det är flera barn -> ska vi förbereda för detta i MVP1 eller ej? Om vi ej ska förbereda för det känns väl dbAccount onödig?\n  //NOTE App.js borde skicka rätt \"format\" via props? Borde vi istället endast från app skicka den infon från db som rör inloggade accountId + parentIds + childIds? \n  // console.log(\"children from db:\", dbChildren.children);\n  // console.log(\"parents from db:\", dbParent.parents);\n  // console.log(\"accounts from db:\", dbAccount.accounts);\n  //Ska vi koda som om det finns många children eller ska vi köra just för MVP1 att det bara finns Theo o Maria + Ulf?\n  //NOTE mockedIds: \n  // let clickedAccountId = 1;\n  // let clickedChildId = 1;\n  // map(), ev ej göra i MVP1:\n  // console.log(\"map() dbAccount.accounts, and if dbAccount.accounts.accountId === clickedAccountId => dbAccount.accounts.childId -> collect all childId in an array for that accountId\", dbAccount.accounts);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"adultsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: dbChildren.children.userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SettingsAdults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SavingGoalAdults, {\n      dbChildren: dbChildren\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TotalSavingsAdults, {\n      dbChildren: dbChildren\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NavFooterAdults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_c = Adults;\n\nvar _c;\n\n$RefreshReg$(_c, \"Adults\");","map":{"version":3,"sources":["/Users/emmahammar/Desktop/repos/repos-jsfordjupn/repos-react/sparis/src/pages/Adults.js"],"names":["React","NavFooterAdults","SettingsAdults","TotalSavingsAdults","SavingGoalAdults","Adults","dbAccount","dbParent","dbChildren","loginAccountId","findChildIdArr","console","log","children","childrenArr","map","child","index","accountId","push","childId","userName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;;AAEA,eAAe,SAASC,MAAT,OAAmD;AAAA,MAAnC;AAACC,IAAAA,SAAD;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAAmC;AAC9D;AACA,MAAIC,cAAc,GAAG,CAArB;AAEA,MAAIC,cAAc,GAAG,EAArB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,UAAU,CAACK,QAArC;AACA,MAAIC,WAAW,GAAGN,UAAU,CAACK,QAA7B;AACAC,EAAAA,WAAW,CAACC,GAAZ,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,SAAN,KAAoBT,cAApB,GAAqCC,cAAc,CAACS,IAAf,CAAoBH,KAAK,CAACI,OAA1B,CAArC,GAA0E,EAA7G;AAEAT,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,cAA1C,EAV8D,CAY9D;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA,sBACI;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA,4BACI;AAAA,gBAAKF,UAAU,CAACK,QAAX,CAAoBQ;AAAzB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,gBAAD;AAAkB,MAAA,UAAU,EAAEb;AAA9B;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,kBAAD;AAAoB,MAAA,UAAU,EAAEA;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;KAvCuBH,M","sourcesContent":["import React from 'react'\nimport NavFooterAdults from '../containers/Adults/NavFooterAdults'\nimport SettingsAdults from '../containers/Adults/SettingsAdults'\nimport TotalSavingsAdults from '../containers/Adults/TotalSavingsAdults'\nimport SavingGoalAdults from '../containers/Adults/SavingGoalAdults'\n\nexport default function Adults({dbAccount, dbParent, dbChildren}) {\n    //NOTE mockedIds: \n    let loginAccountId = 1;\n\n    let findChildIdArr = [];\n\n    console.log(\"dbChildren\", dbChildren.children);\n    let childrenArr = dbChildren.children;\n    childrenArr.map( (child, index) => child.accountId === loginAccountId ? findChildIdArr.push(child.childId) : \"\");\n\n    console.log(\"findChildIdArr after push:\", findChildIdArr);\n\n    //Vad är det vi får här? Har vi i App.js redan sållat så vi endast får rätt barn? O om det är flera barn -> ska vi förbereda för detta i MVP1 eller ej? Om vi ej ska förbereda för det känns väl dbAccount onödig?\n\n\n\n\n    //NOTE App.js borde skicka rätt \"format\" via props? Borde vi istället endast från app skicka den infon från db som rör inloggade accountId + parentIds + childIds? \n    // console.log(\"children from db:\", dbChildren.children);\n    // console.log(\"parents from db:\", dbParent.parents);\n    // console.log(\"accounts from db:\", dbAccount.accounts);\n\n    //Ska vi koda som om det finns många children eller ska vi köra just för MVP1 att det bara finns Theo o Maria + Ulf?\n    //NOTE mockedIds: \n    // let clickedAccountId = 1;\n    // let clickedChildId = 1;\n\n    // map(), ev ej göra i MVP1:\n    // console.log(\"map() dbAccount.accounts, and if dbAccount.accounts.accountId === clickedAccountId => dbAccount.accounts.childId -> collect all childId in an array for that accountId\", dbAccount.accounts);\n\n    return (\n        <div id=\"adultsContainer\">\n            <h2>{dbChildren.children.userName}</h2>\n            <SettingsAdults />\n            <SavingGoalAdults dbChildren={dbChildren}/>\n            <TotalSavingsAdults dbChildren={dbChildren}/>\n            <NavFooterAdults />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}